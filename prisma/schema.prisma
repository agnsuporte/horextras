generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  DEFAULT
  ADMIN
}

model categories {
  id             String @id @default(cuid()) @db.Uuid
  name           String @db.VarChar(100)
  usercategories usercategories[]
}

model profiles {
  id        String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id   String @db.Uuid
  image_url String @db.VarChar(255)
  users     users  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model sheets {
  id           String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id      String   @db.Uuid
  date         DateTime @db.Date
  local        String   @db.VarChar(100)
  start_time   DateTime @db.Time(6)
  end_time     DateTime @db.Time(6)
  lunch_start  DateTime @db.Time(6)
  lunch_end    DateTime @db.Time(6)
  return_lunch DateTime @db.Time(6)
  end_work     DateTime @db.Time(6)
  users        users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model usercategories {
  id          String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id     String     @db.Uuid
  category_id String     @db.Uuid
  active      Boolean
  categories  categories @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users       users      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model users {
  id                      String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                    String      @db.VarChar(100)
  email                   String      @unique
  emailVerified           DateTime?
  image                   String?
  role                    UserRole    @default(DEFAULT)
  password                String?
  isTwoFactorAuthEnabled  Boolean     @default(false)
  twoFactorAuthVerified   DateTime?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  profiles                profiles[]
  timeworked              sheets[]
  usercategories          usercategories[]
}

model VerificationToken {
  id      String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email   String   @unique
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email   String   @unique
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model ResetPasswordToken {
  id      String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email   String   @unique
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}